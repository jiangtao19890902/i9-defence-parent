<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="i9.defence.platform.dao.mapper.StreamOriginMapper">
  <resultMap id="BaseResultMap" type="i9.defence.platform.model.StreamOrigin">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="jsonstr" jdbcType="VARCHAR" property="jsonstr" />
    <result column="submitDate" jdbcType="TIMESTAMP" property="submitDate" />
  	<result column="channelId" jdbcType="VARCHAR" property="channelId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, jsonstr, submitDate, channelId
  </sql>
  <select id="selectByExample" parameterType="i9.defence.platform.model.StreamOriginExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_up_stream_origin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_up_stream_origin
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_up_stream_origin
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="i9.defence.platform.model.StreamOriginExample">
    delete from t_up_stream_origin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="i9.defence.platform.model.StreamOrigin">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_up_stream_origin (jsonstr, submitDate, channelId
      )
    values (#{jsonstr,jdbcType=VARCHAR}, #{submitDate,jdbcType=TIMESTAMP}, #{channelId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="i9.defence.platform.model.StreamOrigin">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_up_stream_origin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jsonstr != null">
        jsonstr,
      </if>
      <if test="submitDate != null">
        submitDate,
      </if>
      <if test="channelId != null">
        channelId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jsonstr != null">
        #{jsonstr,jdbcType=VARCHAR},
      </if>
      <if test="submitDate != null">
        #{submitDate,jdbcType=TIMESTAMP},
      </if>
      <if test="channelId != null">
        #{channelId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
   <select id="countByExample"  resultType="java.lang.Integer">
    select count(*) from t_up_stream_origin
    <if test="_parameter != null">
      <include refid="Query_By_Dto_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_up_stream_origin
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.jsonstr != null">
        jsonstr = #{record.jsonstr,jdbcType=VARCHAR},
      </if>
      <if test="record.submitDate != null">
        submitDate = #{record.submitDate,jdbcType=TIMESTAMP},
      </if>
       <if test="record.channelId != null">
        channelId = #{record.channelId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
     update t_up_stream_origin
    set id = #{record.id,jdbcType=INTEGER},
      jsonstr = #{record.jsonstr,jdbcType=VARCHAR},
      submitDate = #{record.submitDate,jdbcType=TIMESTAMP},
      channelId = #{record.channelId,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="i9.defence.platform.model.StreamOrigin">
    update t_up_stream_origin
    <set>
      <if test="jsonstr != null">
        jsonstr = #{jsonstr,jdbcType=VARCHAR},
      </if>
      <if test="submitDate != null">
        submitDate = #{submitDate,jdbcType=TIMESTAMP},
      </if>
      <if test="channelId != null">
        channelId = #{channelId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="i9.defence.platform.model.StreamOrigin">
     update t_up_stream_origin
    set jsonstr = #{jsonstr,jdbcType=VARCHAR},
      submitDate = #{submitDate,jdbcType=TIMESTAMP},
      channelId = #{channelId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
   <sql id="Query_By_Dto_Where_Clause">
    <trim prefix="WHERE"  prefixOverrides="AND|OR" >
        <if test="example.jsonstr != null and example.jsonstr != ''">
         OR (jsonstr LIKE CONCAT('%',CONCAT('${example.jsonstr}','%'))
        </if>
        <if test="example.channelId != null and example.channelId != ''">
         OR channelId LIKE CONCAT('%',CONCAT('${example.channelId}','%')))
        </if>
    </trim>
  </sql>
   <select id="selectByLimitPage" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from t_up_stream_origin
        <if test="_parameter != null" >
          <include refid="Query_By_Dto_Where_Clause" />
        </if>
        <if test="example.orderByClause != null" >
          order by ${example.orderByClause}
        </if>
        limit #{offset},#{limit}
   </select>
</mapper>